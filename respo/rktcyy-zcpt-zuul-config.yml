#Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，
#更多的处理器都会使Tomcat支持更多的并发。
#Tomcat 默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，
#那性能已经是很低很低了。Tomcat默认配置的最大请求数是150，也就是说同时支持150个并发。
#具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。
#当某个应用拥有 250个以上并发的时候，应考虑应用服务器的集群。操作系统对于进程中的线程数有一定的限制：
#Windows 每个进程中的线程数不允许超过 2000
#Linux 每个进程中的线程数不允许超过 1000
#在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。
server:
  port: 7211 #port 高可用可用端口 7211 ~ 7219 
# tomcat:
#   accept-count: 1000 
#   max-threads: 1000
#   max-connections: 1000  
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8771/eureka
spring:
  application:
    name: rktcyy-zcpt-zuul
zuul:
  host:
    max-per-route-connections: 1000
    max-total-connections: 1000
    socket-timeout-millis: 400 #连接建立时间，三次握手完成时间（默认200）
    connect-timeout-millis: 40 #相邻的报文的间隔时间（默认20）
  ribbonIsolationStrategy: THREAD #(断路器)使用线程策略 默认SEMAPHORE 信号策略 
  threadPool:
    useSeparateThreadPools: true 
  routes:
    rktcyy-zcpt-zcpt:
      path: /zcpt/zcpt/**
      serviceId: rktcyy-zcpt-zcpt-service
      sensitiveHeaders: 
hystrix:
  enabled: true
  config:
    stream:
      maxConcurrentConnections: 50
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 60000
rktcyy-zcpt-zcpt: 
  ribbon: 
    ReadTimeout: 1000
    ConnectTimeout: 1000
    MaxAutoRetries: 0
    MaxAutoRetriesNextServer: 1
    okToRetryOnConnectErrors: true
management:
  security:
    enabled: false
